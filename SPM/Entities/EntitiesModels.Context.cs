//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SPM.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Class_Assignements> Class_Assignements { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Project_Assignments> Project_Assignments { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<School> Schools { get; set; }
        public virtual DbSet<SPM_Users> SPM_Users { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Test_Assignments> Test_Assignments { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
    
        public virtual int DeleteClassAssignments(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClassAssignments", idParameter);
        }
    
        public virtual int DeleteClasses(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteClasses", idParameter);
        }
    
        public virtual int DeletePrograms(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePrograms", idParameter);
        }
    
        public virtual int DeleteProjects(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProjects", idParameter);
        }
    
        public virtual int DeleteProjectsAssignment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProjectsAssignment", idParameter);
        }
    
        public virtual int DeleteSchools(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSchools", idParameter);
        }
    
        public virtual int DeleteTestAssignment(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTestAssignment", idParameter);
        }
    
        public virtual int DeleteTests(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteTests", idParameter);
        }
    
        public virtual int DeleteUsers(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUsers", idParameter);
        }
    
        public virtual int InsertClassAssignments(Nullable<int> fk_class, Nullable<int> fk_program, Nullable<int> fk_school, Nullable<int> fk_student, Nullable<int> fk_teacher)
        {
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_programParameter = fk_program.HasValue ?
                new ObjectParameter("fk_program", fk_program) :
                new ObjectParameter("fk_program", typeof(int));
    
            var fk_schoolParameter = fk_school.HasValue ?
                new ObjectParameter("fk_school", fk_school) :
                new ObjectParameter("fk_school", typeof(int));
    
            var fk_studentParameter = fk_student.HasValue ?
                new ObjectParameter("fk_student", fk_student) :
                new ObjectParameter("fk_student", typeof(int));
    
            var fk_teacherParameter = fk_teacher.HasValue ?
                new ObjectParameter("fk_teacher", fk_teacher) :
                new ObjectParameter("fk_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClassAssignments", fk_classParameter, fk_programParameter, fk_schoolParameter, fk_studentParameter, fk_teacherParameter);
        }
    
        public virtual int InsertClasses(string class_name, string class_code, string teacher_name, Nullable<int> credit_hours, Nullable<int> fk_school_id)
        {
            var class_nameParameter = class_name != null ?
                new ObjectParameter("class_name", class_name) :
                new ObjectParameter("class_name", typeof(string));
    
            var class_codeParameter = class_code != null ?
                new ObjectParameter("class_code", class_code) :
                new ObjectParameter("class_code", typeof(string));
    
            var teacher_nameParameter = teacher_name != null ?
                new ObjectParameter("teacher_name", teacher_name) :
                new ObjectParameter("teacher_name", typeof(string));
    
            var credit_hoursParameter = credit_hours.HasValue ?
                new ObjectParameter("credit_hours", credit_hours) :
                new ObjectParameter("credit_hours", typeof(int));
    
            var fk_school_idParameter = fk_school_id.HasValue ?
                new ObjectParameter("fk_school_id", fk_school_id) :
                new ObjectParameter("fk_school_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertClasses", class_nameParameter, class_codeParameter, teacher_nameParameter, credit_hoursParameter, fk_school_idParameter);
        }
    
        public virtual int InsertProjectAssignments(Nullable<int> fk_project, Nullable<int> fk_class, Nullable<int> fk_user_student, Nullable<int> fk_teacher)
        {
            var fk_projectParameter = fk_project.HasValue ?
                new ObjectParameter("fk_project", fk_project) :
                new ObjectParameter("fk_project", typeof(int));
    
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_user_studentParameter = fk_user_student.HasValue ?
                new ObjectParameter("fk_user_student", fk_user_student) :
                new ObjectParameter("fk_user_student", typeof(int));
    
            var fk_teacherParameter = fk_teacher.HasValue ?
                new ObjectParameter("fk_teacher", fk_teacher) :
                new ObjectParameter("fk_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProjectAssignments", fk_projectParameter, fk_classParameter, fk_user_studentParameter, fk_teacherParameter);
        }
    
        public virtual int InsertProjects(string name, Nullable<double> grade, Nullable<int> grade_out_of, Nullable<int> grade_weight, Nullable<System.DateTime> due_date, Nullable<int> fk_class_id, Nullable<System.DateTime> created_at, byte[] last_modified)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(double));
    
            var grade_out_ofParameter = grade_out_of.HasValue ?
                new ObjectParameter("grade_out_of", grade_out_of) :
                new ObjectParameter("grade_out_of", typeof(int));
    
            var grade_weightParameter = grade_weight.HasValue ?
                new ObjectParameter("grade_weight", grade_weight) :
                new ObjectParameter("grade_weight", typeof(int));
    
            var due_dateParameter = due_date.HasValue ?
                new ObjectParameter("due_date", due_date) :
                new ObjectParameter("due_date", typeof(System.DateTime));
    
            var fk_class_idParameter = fk_class_id.HasValue ?
                new ObjectParameter("fk_class_id", fk_class_id) :
                new ObjectParameter("fk_class_id", typeof(int));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("created_at", created_at) :
                new ObjectParameter("created_at", typeof(System.DateTime));
    
            var last_modifiedParameter = last_modified != null ?
                new ObjectParameter("last_modified", last_modified) :
                new ObjectParameter("last_modified", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProjects", nameParameter, gradeParameter, grade_out_ofParameter, grade_weightParameter, due_dateParameter, fk_class_idParameter, created_atParameter, last_modifiedParameter);
        }
    
        public virtual int InsertSchools(string school_name, string country, string city)
        {
            var school_nameParameter = school_name != null ?
                new ObjectParameter("school_name", school_name) :
                new ObjectParameter("school_name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSchools", school_nameParameter, countryParameter, cityParameter);
        }
    
        public virtual int InsertTestAssignments(Nullable<int> fk_test, Nullable<int> fk_class, Nullable<int> fk_user_student, Nullable<int> fk_user_teacher)
        {
            var fk_testParameter = fk_test.HasValue ?
                new ObjectParameter("fk_test", fk_test) :
                new ObjectParameter("fk_test", typeof(int));
    
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_user_studentParameter = fk_user_student.HasValue ?
                new ObjectParameter("fk_user_student", fk_user_student) :
                new ObjectParameter("fk_user_student", typeof(int));
    
            var fk_user_teacherParameter = fk_user_teacher.HasValue ?
                new ObjectParameter("fk_user_teacher", fk_user_teacher) :
                new ObjectParameter("fk_user_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTestAssignments", fk_testParameter, fk_classParameter, fk_user_studentParameter, fk_user_teacherParameter);
        }
    
        public virtual int InsertTests(string name, Nullable<double> grade, Nullable<int> grade_out_of, Nullable<int> grade_weight, Nullable<System.DateTime> due_date, Nullable<int> fk_class_id, Nullable<System.DateTime> created_at)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(double));
    
            var grade_out_ofParameter = grade_out_of.HasValue ?
                new ObjectParameter("grade_out_of", grade_out_of) :
                new ObjectParameter("grade_out_of", typeof(int));
    
            var grade_weightParameter = grade_weight.HasValue ?
                new ObjectParameter("grade_weight", grade_weight) :
                new ObjectParameter("grade_weight", typeof(int));
    
            var due_dateParameter = due_date.HasValue ?
                new ObjectParameter("due_date", due_date) :
                new ObjectParameter("due_date", typeof(System.DateTime));
    
            var fk_class_idParameter = fk_class_id.HasValue ?
                new ObjectParameter("fk_class_id", fk_class_id) :
                new ObjectParameter("fk_class_id", typeof(int));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("created_at", created_at) :
                new ObjectParameter("created_at", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTests", nameParameter, gradeParameter, grade_out_ofParameter, grade_weightParameter, due_dateParameter, fk_class_idParameter, created_atParameter);
        }
    
        public virtual int InsertUsers(string userName, string password, Nullable<int> fk_school, Nullable<int> fk_program, string email, Nullable<bool> is_student, Nullable<bool> is_teacher, Nullable<bool> is_admin, Nullable<System.DateTime> created_at, byte[] last_login_at, Nullable<bool> email_confirmed, Nullable<double> gpa)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var fk_schoolParameter = fk_school.HasValue ?
                new ObjectParameter("fk_school", fk_school) :
                new ObjectParameter("fk_school", typeof(int));
    
            var fk_programParameter = fk_program.HasValue ?
                new ObjectParameter("fk_program", fk_program) :
                new ObjectParameter("fk_program", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var is_studentParameter = is_student.HasValue ?
                new ObjectParameter("is_student", is_student) :
                new ObjectParameter("is_student", typeof(bool));
    
            var is_teacherParameter = is_teacher.HasValue ?
                new ObjectParameter("is_teacher", is_teacher) :
                new ObjectParameter("is_teacher", typeof(bool));
    
            var is_adminParameter = is_admin.HasValue ?
                new ObjectParameter("is_admin", is_admin) :
                new ObjectParameter("is_admin", typeof(bool));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("created_at", created_at) :
                new ObjectParameter("created_at", typeof(System.DateTime));
    
            var last_login_atParameter = last_login_at != null ?
                new ObjectParameter("last_login_at", last_login_at) :
                new ObjectParameter("last_login_at", typeof(byte[]));
    
            var email_confirmedParameter = email_confirmed.HasValue ?
                new ObjectParameter("email_confirmed", email_confirmed) :
                new ObjectParameter("email_confirmed", typeof(bool));
    
            var gpaParameter = gpa.HasValue ?
                new ObjectParameter("gpa", gpa) :
                new ObjectParameter("gpa", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertUsers", userNameParameter, passwordParameter, fk_schoolParameter, fk_programParameter, emailParameter, is_studentParameter, is_teacherParameter, is_adminParameter, created_atParameter, last_login_atParameter, email_confirmedParameter, gpaParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int UpdateClassAssignments(Nullable<int> id, Nullable<int> fk_class, Nullable<int> fk_program, Nullable<int> fk_school, Nullable<int> fk_student, Nullable<int> fk_teacher)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_programParameter = fk_program.HasValue ?
                new ObjectParameter("fk_program", fk_program) :
                new ObjectParameter("fk_program", typeof(int));
    
            var fk_schoolParameter = fk_school.HasValue ?
                new ObjectParameter("fk_school", fk_school) :
                new ObjectParameter("fk_school", typeof(int));
    
            var fk_studentParameter = fk_student.HasValue ?
                new ObjectParameter("fk_student", fk_student) :
                new ObjectParameter("fk_student", typeof(int));
    
            var fk_teacherParameter = fk_teacher.HasValue ?
                new ObjectParameter("fk_teacher", fk_teacher) :
                new ObjectParameter("fk_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClassAssignments", idParameter, fk_classParameter, fk_programParameter, fk_schoolParameter, fk_studentParameter, fk_teacherParameter);
        }
    
        public virtual int UpdateClasses(Nullable<int> id, string class_name, string class_code, string teacher_name, Nullable<int> credit_hours)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var class_nameParameter = class_name != null ?
                new ObjectParameter("class_name", class_name) :
                new ObjectParameter("class_name", typeof(string));
    
            var class_codeParameter = class_code != null ?
                new ObjectParameter("class_code", class_code) :
                new ObjectParameter("class_code", typeof(string));
    
            var teacher_nameParameter = teacher_name != null ?
                new ObjectParameter("teacher_name", teacher_name) :
                new ObjectParameter("teacher_name", typeof(string));
    
            var credit_hoursParameter = credit_hours.HasValue ?
                new ObjectParameter("credit_hours", credit_hours) :
                new ObjectParameter("credit_hours", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateClasses", idParameter, class_nameParameter, class_codeParameter, teacher_nameParameter, credit_hoursParameter);
        }
    
        public virtual int UpdatePrograms(Nullable<int> id, Nullable<int> fk_school, string name, Nullable<byte> semesters, string course_code)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fk_schoolParameter = fk_school.HasValue ?
                new ObjectParameter("fk_school", fk_school) :
                new ObjectParameter("fk_school", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var semestersParameter = semesters.HasValue ?
                new ObjectParameter("semesters", semesters) :
                new ObjectParameter("semesters", typeof(byte));
    
            var course_codeParameter = course_code != null ?
                new ObjectParameter("course_code", course_code) :
                new ObjectParameter("course_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePrograms", idParameter, fk_schoolParameter, nameParameter, semestersParameter, course_codeParameter);
        }
    
        public virtual int UpdateProjectAssignments(Nullable<int> id, Nullable<int> fk_project, Nullable<int> fk_class, Nullable<int> fk_user_student, Nullable<int> fk_teacher)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fk_projectParameter = fk_project.HasValue ?
                new ObjectParameter("fk_project", fk_project) :
                new ObjectParameter("fk_project", typeof(int));
    
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_user_studentParameter = fk_user_student.HasValue ?
                new ObjectParameter("fk_user_student", fk_user_student) :
                new ObjectParameter("fk_user_student", typeof(int));
    
            var fk_teacherParameter = fk_teacher.HasValue ?
                new ObjectParameter("fk_teacher", fk_teacher) :
                new ObjectParameter("fk_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjectAssignments", idParameter, fk_projectParameter, fk_classParameter, fk_user_studentParameter, fk_teacherParameter);
        }
    
        public virtual int UpdateProjects(Nullable<int> id, string name, Nullable<double> grade, Nullable<int> grade_out_of, Nullable<int> grade_weight, Nullable<System.DateTime> due_date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(double));
    
            var grade_out_ofParameter = grade_out_of.HasValue ?
                new ObjectParameter("grade_out_of", grade_out_of) :
                new ObjectParameter("grade_out_of", typeof(int));
    
            var grade_weightParameter = grade_weight.HasValue ?
                new ObjectParameter("grade_weight", grade_weight) :
                new ObjectParameter("grade_weight", typeof(int));
    
            var due_dateParameter = due_date.HasValue ?
                new ObjectParameter("due_date", due_date) :
                new ObjectParameter("due_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateProjects", idParameter, nameParameter, gradeParameter, grade_out_ofParameter, grade_weightParameter, due_dateParameter);
        }
    
        public virtual int UpdateSchools(Nullable<int> id, string school_name, string country, string city)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var school_nameParameter = school_name != null ?
                new ObjectParameter("school_name", school_name) :
                new ObjectParameter("school_name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSchools", idParameter, school_nameParameter, countryParameter, cityParameter);
        }
    
        public virtual int UpdateTestAssignment(Nullable<int> id, Nullable<int> fk_test, Nullable<int> fk_class, Nullable<int> fk_user_student, Nullable<int> fk_user_teacher)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var fk_testParameter = fk_test.HasValue ?
                new ObjectParameter("fk_test", fk_test) :
                new ObjectParameter("fk_test", typeof(int));
    
            var fk_classParameter = fk_class.HasValue ?
                new ObjectParameter("fk_class", fk_class) :
                new ObjectParameter("fk_class", typeof(int));
    
            var fk_user_studentParameter = fk_user_student.HasValue ?
                new ObjectParameter("fk_user_student", fk_user_student) :
                new ObjectParameter("fk_user_student", typeof(int));
    
            var fk_user_teacherParameter = fk_user_teacher.HasValue ?
                new ObjectParameter("fk_user_teacher", fk_user_teacher) :
                new ObjectParameter("fk_user_teacher", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTestAssignment", idParameter, fk_testParameter, fk_classParameter, fk_user_studentParameter, fk_user_teacherParameter);
        }
    
        public virtual int UpdateTests(Nullable<int> id, string name, Nullable<double> grade, Nullable<int> grade_out_of, Nullable<int> grade_weight, Nullable<System.DateTime> due_date)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var gradeParameter = grade.HasValue ?
                new ObjectParameter("grade", grade) :
                new ObjectParameter("grade", typeof(double));
    
            var grade_out_ofParameter = grade_out_of.HasValue ?
                new ObjectParameter("grade_out_of", grade_out_of) :
                new ObjectParameter("grade_out_of", typeof(int));
    
            var grade_weightParameter = grade_weight.HasValue ?
                new ObjectParameter("grade_weight", grade_weight) :
                new ObjectParameter("grade_weight", typeof(int));
    
            var due_dateParameter = due_date.HasValue ?
                new ObjectParameter("due_date", due_date) :
                new ObjectParameter("due_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTests", idParameter, nameParameter, gradeParameter, grade_out_ofParameter, grade_weightParameter, due_dateParameter);
        }
    
        public virtual int UpdateUsers(Nullable<int> id, string userName, string password, string email, Nullable<bool> is_student, Nullable<bool> is_teacher, Nullable<bool> is_admin, Nullable<System.DateTime> created_at, byte[] last_login_at, Nullable<bool> email_confirmed, Nullable<double> gpa)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var is_studentParameter = is_student.HasValue ?
                new ObjectParameter("is_student", is_student) :
                new ObjectParameter("is_student", typeof(bool));
    
            var is_teacherParameter = is_teacher.HasValue ?
                new ObjectParameter("is_teacher", is_teacher) :
                new ObjectParameter("is_teacher", typeof(bool));
    
            var is_adminParameter = is_admin.HasValue ?
                new ObjectParameter("is_admin", is_admin) :
                new ObjectParameter("is_admin", typeof(bool));
    
            var created_atParameter = created_at.HasValue ?
                new ObjectParameter("created_at", created_at) :
                new ObjectParameter("created_at", typeof(System.DateTime));
    
            var last_login_atParameter = last_login_at != null ?
                new ObjectParameter("last_login_at", last_login_at) :
                new ObjectParameter("last_login_at", typeof(byte[]));
    
            var email_confirmedParameter = email_confirmed.HasValue ?
                new ObjectParameter("email_confirmed", email_confirmed) :
                new ObjectParameter("email_confirmed", typeof(bool));
    
            var gpaParameter = gpa.HasValue ?
                new ObjectParameter("gpa", gpa) :
                new ObjectParameter("gpa", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUsers", idParameter, userNameParameter, passwordParameter, emailParameter, is_studentParameter, is_teacherParameter, is_adminParameter, created_atParameter, last_login_atParameter, email_confirmedParameter, gpaParameter);
        }
    
        public virtual int InsertPrograms(Nullable<int> fk_school, string name, Nullable<int> semesters, string course_code)
        {
            var fk_schoolParameter = fk_school.HasValue ?
                new ObjectParameter("fk_school", fk_school) :
                new ObjectParameter("fk_school", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var semestersParameter = semesters.HasValue ?
                new ObjectParameter("semesters", semesters) :
                new ObjectParameter("semesters", typeof(int));
    
            var course_codeParameter = course_code != null ?
                new ObjectParameter("course_code", course_code) :
                new ObjectParameter("course_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPrograms", fk_schoolParameter, nameParameter, semestersParameter, course_codeParameter);
        }
    }
}
